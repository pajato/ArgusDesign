* High Level Component Structure Diagram
#+begin_src plantuml :file highLevelComponentStructure.png

legend top right
<i>Layers Legend</i>

| |= Layer Name |
|<back:#B0D6F9>    </back>| Frameworks & Drivers |
|<back:#B7FAC0>    </back>| Interface Adapters |
|<back:#F2A49F>    </back>| Use Cases |
|<back:#F9F8BF>    </back>| Entities |
endlegend

[iOS] <<framework>> #B0D6F9
[Android] <<framework>> #B0D6F9
[Firebase] <<framework>> #B0D6F9

[iosGUI] <<app>> #B7FAC0
[androidGUI] <<app>> #B7FAC0
[Authentication] <<library>> #B7FAC0
[Persistence] <<library>> #B7FAC0

[Core] <<library>> #F2A49F
[CoreAuth] <<library>> #F2A49F
[CorePersist] <<library>> #F2A49F
[CoreVideo] <<library>> #F2A49F
[CoreLists] <<library>> #F2A49F
[CoreXXX] <<library>> #F2A49F
[CoreData] <<library>> #F9F8BF

[Test] <<temp>> #Cornsilk

[iOS] --> [iosGUI]
[Android] --> [androidGUI]
[Firebase] --> [Authentication]
[Firebase] --> [Persistence]

[iosGUI] --> [Core]
[androidGUI] --> [Core]
[Authentication] --> [Core]
[Persistence] --> [Core]

[Core] --> [CoreAuth]
[Core] --> [CoreLists]
[Core] --> [CorePersist]
[Core] --> [CoreVideo]
[Core] --> [CoreXXX]

[CoreAuth] --> [CoreData]
[CorePersist] --> [CoreData]
[CoreVideo] --> [CoreData]
[CoreLists] --> [CoreData]

[CoreAuth] <.. [Test]
[CorePersist] <.. [Test]
[CoreVideo] <.. [Test]
[CoreLists] <.. [Test]
[CoreData] <.. [Test]

note right of [Core] : Umbrella library
note bottom of [CoreXXX] : TBD Use Cases
note left of [Test] : Temp TDD\nsupport classes
note left of [iosGUI] : MVP
note right of [androidGUI] : MVVM

#+end_src

#+RESULTS:
[[file:highLevelComponentStructure.png]]
* Video Use Cases Class Structure
#+begin_src plantuml :file videoUseCasesClassStructure.png
title Argus Core Video Use Cases Class Structure

package data <<library>> #F9F8BF {

  enum VideoType { error, movie, movieSeries, tvShow, tvSeries }

  enum VideoValue {
    intValue(integer),
    stringValue(string),
    listValue(VideoValue),
    error(string)
  }

  enum VideoResult {
    normal(Video?)
    error(string)
  }

  interface VideoAttributes {
    + keys: list<string>
    + values: map<string, VideoValue>
    getAny(key) : VideoValue
    getUsingValidKey(key: string) : VideoValue
  }

  interface VideoFinder {
    findById(id: integer) : VideoResult
    findByName(name: string) : VideoResult
    findFuzzy(name: regexp, data: VideoAttributes) : list<Video>
  }

  interface VideoRegistrar {
    register(name: string, data: VideoAttributes) : VideoResult
    update(id: integer, data: VideoAttributes)
  }

  abstract class Video {
    + type: VideoType
    + data: Map<String, Attribute>
  }

  class Movie(id: Int) : Video
  class MovieSeries(id: Int) : Video
  class TvShow(id: Int) : Video
  class TvSeries(id: Int) : Video
  class VideoError(key: ErrorKey) : Video
}



  VideoAttributes --> VideoValue
  Video --> VideoType
  Video --> VideoAttributes
  VideoFinder --> VideoResult
  VideoRegistrar --> VideoResult

}

package video <<library>> #F2A49F {

  class VideoInteractor {
    videoStore: list<Video>
    set(persister: VideoRegistrar)
  }

}

package persister <<library>> #B7FAC0 {
  class VideoPersister
}

VideoPersister ..|> VideoRegistrar
VideoInteractor ..|> VideoRegistrar
VideoInteractor ..|> VideoFinder
VideoInteractor --> Video

skinparam defaultFontSize 18

#+end_src

#+RESULTS:
[[file:videoUseCasesClassStructure.png]]
